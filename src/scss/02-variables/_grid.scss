@use "sass:map";
@use "sass:math";
@use "variables" as _vars;

// ----------------------------
// Breakpoints (mobile-first)
// ----------------------------
$breakpoints: (
        sm: 40rem,  // 640px
        md: 48rem,  // 768px
        lg: 64rem,  // 1024px
        xl: 80rem   // 1280px
);

@mixin mq($bp) {
  @media (min-width: map.get($breakpoints, $bp)) { @content; }
}

// ----------------------------
// Containers
// ----------------------------
.container {
  width: min(100% - (var(--container-pad) * 2), var(--container-max));
  margin-inline: auto;
}

.grid-12 {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  gap: var(--space-4);
}

// Optional quick grids (intentionally limited set)
$allowed-grids: 2, 3, 4, 6, 12;

@mixin generate-grid-classes($list) {
  @each $n in $list {
    .grid-#{$n} {
      display: grid;
      grid-template-columns: repeat(#{$n}, 1fr);
      gap: var(--space-4);
    }
  }
}
@include generate-grid-classes($allowed-grids);

// ----------------------------
// Gaps
// ----------------------------
@each $k, $v in _vars.$spacing-scale {
  .gap-#{$k} { gap: var(--space-#{$k}); }
}

// ----------------------------
// Column spans (12-col system)
// ----------------------------
@function clamp-span($n) { @return math.max(1, math.min(12, $n)); }
@mixin col-span($n) {
  $n: clamp-span($n);
  grid-column: span #{$n} / span #{$n};
}

/* Base spans apply ONLY inside .grid-12 (but with zero specificity) */
// keep base only inside the grid container (0 specificity because of :where)
:where(.grid-12) {
  @for $i from 1 through 12 {
    > .col-#{$i} { @include col-span($i); }
  }
}

// responsive utilities (0-0-1) always win over the :where base
@for $i from 1 through 12 {
  @each $bp, $size in $breakpoints {
    .#{$bp}\:col-#{$i} {
      @include mq($bp) { @include col-span($i); }
    }
  }
}

// ----------------------------
// Auto grid + helpers
// ----------------------------
.grid-auto {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(16rem, 1fr));
  gap: var(--space-4);
}

.flex { display: flex; gap: var(--space-3); }
.stack { display: grid; gap: var(--space-3); } // vertical rhythm
